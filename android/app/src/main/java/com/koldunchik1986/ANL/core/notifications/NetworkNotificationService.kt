package com.koldunchik1986.ANL.core.notifications

import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import android.widget.Toast
import androidx.core.app.NotificationCompat
import com.koldunchik1986.ANL.R
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import javax.inject.Inject
import javax.inject.Singleton

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
@Singleton
class NetworkNotificationService @Inject constructor(
    private val context: Context
) {
    
    companion object {
        private const val CHANNEL_ID = "network_debug_channel"
        private const val CHANNEL_NAME = "–û—Ç–ª–∞–¥–∫–∞ —Å–µ—Ç–∏"
        private const val NOTIFICATION_ID = 1001
    }
    
    private val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
    private val coroutineScope = CoroutineScope(Dispatchers.Main)
    
    init {
        createNotificationChannel()
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å Toast —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ
     */
    fun showRequestToast(method: String, url: String) {
        coroutineScope.launch {
            val shortUrl = url.substringAfterLast("/").take(30)
            Toast.makeText(
                context,
                "üîÑ $method $shortUrl",
                Toast.LENGTH_SHORT
            ).show()
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å Toast —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–≤–µ—Ç–µ
     */
    fun showResponseToast(url: String, responseCode: Int, duration: Long) {
        coroutineScope.launch {
            val shortUrl = url.substringAfterLast("/").take(30)
            val status = when {
                responseCode in 200..299 -> "‚úÖ"
                responseCode in 400..499 -> "‚ùå"
                responseCode in 500..599 -> "üí•"
                else -> "‚ùì"
            }
            Toast.makeText(
                context,
                "$status $responseCode $shortUrl (${duration}ms)",
                Toast.LENGTH_SHORT
            ).show()
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–∞–ø–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    fun showAuthStepNotification(step: String) {
        coroutineScope.launch {
            Toast.makeText(
                context,
                "üîê $step",
                Toast.LENGTH_LONG
            ).show()
            
            showPersistentNotification("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", step)
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    fun showErrorNotification(error: String) {
        coroutineScope.launch {
            Toast.makeText(
                context,
                "‚ùå $error",
                Toast.LENGTH_LONG
            ).show()
            
            showPersistentNotification("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", error)
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    fun showInfoNotification(message: String) {
        coroutineScope.launch {
            Toast.makeText(
                context,
                "‚ÑπÔ∏è $message",
                Toast.LENGTH_LONG
            ).show()
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     */
    private fun showPersistentNotification(title: String, content: String) {
        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle(title)
            .setContentText(content)
            .setStyle(NotificationCompat.BigTextStyle().bigText(content))
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)
            .setAutoCancel(true)
            .build()
        
        notificationManager.notify(NOTIFICATION_ID, notification)
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    fun clearNotifications() {
        notificationManager.cancel(NOTIFICATION_ID)
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android 8+
     */
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_DEFAULT
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–µ"
                enableVibration(false)
                setSound(null, null)
            }
            notificationManager.createNotificationChannel(channel)
        }
    }
}