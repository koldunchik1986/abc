package com.koldunchik1986.ANL.core.logging

import android.content.Context
import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.*
import javax.inject.Inject
import javax.inject.Singleton

/**
 * –õ–æ–≥–≥–µ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤ —Ñ–∞–π–ª log.txt
 * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Å–µ HTTP –∑–∞–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
@Singleton
class NetworkLogger @Inject constructor(
    private val context: Context
) {
    
    companion object {
        private const val TAG = "NetworkLogger"
        private const val LOG_FILE_NAME = "log.txt"
        private const val MAX_LOG_SIZE = 10 * 1024 * 1024 // 10MB –º–∞–∫—Å–∏–º—É–º
    }
    
    private val dateFormat = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS", Locale.getDefault())
    private val logFile: File by lazy {
        File(context.getExternalFilesDir(null), LOG_FILE_NAME)
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ HTTP –∑–∞–ø—Ä–æ—Å–∞
     */
    suspend fun logRequest(
        method: String,
        url: String,
        headers: Map<String, String>,
        body: String? = null
    ) {
        val logEntry = buildString {
            appendLine("=".repeat(80))
            appendLine("üîÑ –ò–°–•–û–î–Ø–©–ò–ô –ó–ê–ü–†–û–°")
            appendLine("–í—Ä–µ–º—è: ${getCurrentTimestamp()}")
            appendLine("–ú–µ—Ç–æ–¥: $method")
            appendLine("URL: $url")
            appendLine("–ó–∞–≥–æ–ª–æ–≤–∫–∏:")
            headers.forEach { (key, value) ->
                appendLine("  $key: $value")
            }
            if (!body.isNullOrEmpty()) {
                appendLine("–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:")
                appendLine(body)
            }
            appendLine("=".repeat(80))
        }
        
        writeToFile(logEntry)
        Log.d(TAG, "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: $method $url")
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ HTTP –æ—Ç–≤–µ—Ç–∞
     */
    suspend fun logResponse(
        url: String,
        responseCode: Int,
        headers: Map<String, String>,
        body: String? = null,
        duration: Long
    ) {
        val logEntry = buildString {
            appendLine("üì• –í–•–û–î–Ø–©–ò–ô –û–¢–í–ï–¢")
            appendLine("–í—Ä–µ–º—è: ${getCurrentTimestamp()}")
            appendLine("URL: $url")
            appendLine("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: $responseCode")
            appendLine("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}ms")
            appendLine("–ó–∞–≥–æ–ª–æ–≤–∫–∏:")
            headers.forEach { (key, value) ->
                appendLine("  $key: $value")
            }
            if (!body.isNullOrEmpty()) {
                val truncatedBody = if (body.length > 2000) {
                    body.take(2000) + "\n... (—Ç–µ–ª–æ –æ–±—Ä–µ–∑–∞–Ω–æ, –ø–æ–ª–Ω–∞—è –¥–ª–∏–Ω–∞: ${body.length})"
                } else {
                    body
                }
                appendLine("–¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞:")
                appendLine(truncatedBody)
            }
            appendLine("=".repeat(80))
            appendLine()
        }
        
        writeToFile(logEntry)
        Log.d(TAG, "–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: $responseCode –¥–ª—è $url")
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
     */
    suspend fun logAuthStep(step: String, details: String = "") {
        val logEntry = buildString {
            appendLine("üîê –≠–¢–ê–ü –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò")
            appendLine("–í—Ä–µ–º—è: ${getCurrentTimestamp()}")
            appendLine("–≠—Ç–∞–ø: $step")
            if (details.isNotEmpty()) {
                appendLine("–î–µ—Ç–∞–ª–∏: $details")
            }
            appendLine("-".repeat(40))
            appendLine()
        }
        
        writeToFile(logEntry)
        Log.i(TAG, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: $step")
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
     */
    suspend fun logError(error: String, exception: Throwable? = null) {
        val logEntry = buildString {
            appendLine("‚ùå –û–®–ò–ë–ö–ê")
            appendLine("–í—Ä–µ–º—è: ${getCurrentTimestamp()}")
            appendLine("–û—à–∏–±–∫–∞: $error")
            exception?.let {
                appendLine("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${it.javaClass.simpleName}")
                appendLine("–°–æ–æ–±—â–µ–Ω–∏–µ: ${it.message}")
                appendLine("Stack trace:")
                appendLine(it.stackTraceToString())
            }
            appendLine("-".repeat(40))
            appendLine()
        }
        
        writeToFile(logEntry)
        Log.e(TAG, "–û—à–∏–±–∫–∞: $error", exception)
    }
    
    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    suspend fun logInfo(message: String) {
        val logEntry = buildString {
            appendLine("‚ÑπÔ∏è INFO")
            appendLine("–í—Ä–µ–º—è: ${getCurrentTimestamp()}")
            appendLine("–°–æ–æ–±—â–µ–Ω–∏–µ: $message")
            appendLine("-".repeat(40))
            appendLine()
        }
        
        writeToFile(logEntry)
        Log.i(TAG, "Info: $message")
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥ —Ñ–∞–π–ª–∞
     */
    suspend fun clearLog() {
        withContext(Dispatchers.IO) {
            try {
                if (logFile.exists()) {
                    logFile.delete()
                }
                logInfo("–õ–æ–≥ —Ñ–∞–π–ª –æ—á–∏—â–µ–Ω")
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥ —Ñ–∞–π–ª–∞", e)
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–≥ —Ñ–∞–π–ª–∞
     */
    suspend fun getLogContent(): String {
        return withContext(Dispatchers.IO) {
            try {
                if (logFile.exists()) {
                    logFile.readText()
                } else {
                    "–õ–æ–≥ —Ñ–∞–π–ª –ø—É—Å—Ç"
                }
            } catch (e: Exception) {
                "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥ —Ñ–∞–π–ª–∞: ${e.message}"
            }
        }
    }
    
    /**
     * –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
     */
    private suspend fun writeToFile(content: String) {
        withContext(Dispatchers.IO) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                if (logFile.exists() && logFile.length() > MAX_LOG_SIZE) {
                    // –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–π–ª, –æ—Å—Ç–∞–≤–ª—è—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 70% —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                    val existingContent = logFile.readText()
                    val trimmedContent = existingContent.takeLast((MAX_LOG_SIZE * 0.7).toInt())
                    logFile.writeText("... (–Ω–∞—á–∞–ª–æ –ª–æ–≥–∞ –æ–±—Ä–µ–∑–∞–Ω–æ)\n\n" + trimmedContent)
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                FileOutputStream(logFile, true).use { fos ->
                    fos.write(content.toByteArray(Charsets.UTF_8))
                    fos.flush()
                }
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ —Ñ–∞–π–ª", e)
            }
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    private fun getCurrentTimestamp(): String {
        return dateFormat.format(Date())
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ª–æ–≥ —Ñ–∞–π–ª—É
     */
    fun getLogFilePath(): String {
        return logFile.absolutePath
    }
}